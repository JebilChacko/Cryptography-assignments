from Crypto.Util.number import inverse
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import hashlib


def is_pkcs7_padded(message):
    padding = message[-message[-1]:]
    return all(padding[i] == len(padding) for i in range(0, len(padding)))


def decrypt_flag(shared_secret: int, iv_hex: str, ciphertext_hex: str):
    sha1 = hashlib.sha1()
    sha1.update(str(shared_secret).encode('ascii'))
    key = sha1.digest()[:16]

    ciphertext = bytes.fromhex(ciphertext_hex)
    iv = bytes.fromhex(iv_hex)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext)

    if is_pkcs7_padded(plaintext):
        return unpad(plaintext, 16).decode('ascii')
    else:
        return plaintext.decode('ascii')

# Elliptic Curve Point Addition

p = 9739
a = 497
b = 1768

def add_points(p1, p2):
    if p1 == (0, 0):
        return p2
    if p2 == (0, 0):
        return p1

    x1, y1 = p1
    x2, y2 = p2

    if x1 == x2 and y1 == -y2:
        return (0, 0)

    if p1 == p2:
        s1 = (3 * pow(x1, 2, p) + a) % p
        s2 = (2 * y1) % p
        s = s1 * inverse(s2, p)
    else:
        s1 = (y2 - y1) % p
        s2 = (x2 - x1) % p
        s = s1 * inverse(s2, p)

    x3 = ((s * s) - x1 - x2) % p
    y3 = (s * (x1 - x3) - y1) % p

    return (x3, y3)

def scalar_mul(point, scalar):
    P = point
    Q = point
    R = (0, 0)  # Identity

    while scalar > 0:
        if scalar & 1:
            R = add_points(R, Q)
        Q = add_points(Q, Q)
        scalar = scalar // 2

    return R

G = (1804, 5368)
x = 4726
n = (x**3 + 497*x + 1768) % p
y = pow(n, (p+1)//4, p)
A = (x, y)
nB = 6534
shared_secret = scalar_mul(A, nB)[0]
iv_hex = 'cd9da9f1c60925922377ea952afc212c'
ciphertext_hex = 'febcbe3a3414a730b125931dccf912d2239f3e969c4334d95ed0ec86f6449ad8'

print(decrypt_flag(shared_secret, iv_hex, ciphertext_hex))
