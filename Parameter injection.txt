from pwn import *
import re
import json

r = remote("socket.cryptohack.org", 13371)

r.recvline()
r.sendline(json.dumps({'p': f'{hex(1)}', 'g': f'{hex(1)}', 'A': f'{hex(1)}'})) # Send some input
r.sendline(json.dumps({'p': f'{hex(31)}', 'g': f'{hex(2)}', 'B': f'{hex(1)}'})) # Send B = 1
r.recvline()

data = json.loads(re.findall(b'{.*}', r.recvline())[0])

iv = data['iv']
flag_enc = data['encrypted_flag']

shared_secret = 1 # Shared secret is (g^b)^a = B^a =  1^a = 1 mod p

# --- From Diffie Hellman Starter 5 ---

from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import hashlib


def is_pkcs7_padded(message):
    padding = message[-message[-1]:]
    return all(padding[i] == len(padding) for i in range(0, len(padding)))


def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):
    # Derive AES key from shared secret
    sha1 = hashlib.sha1()
    sha1.update(str(shared_secret).encode('ascii'))
    key = sha1.digest()[:16]
    # Decrypt flag
    ciphertext = bytes.fromhex(ciphertext)
    iv = bytes.fromhex(iv)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext)
    if is_pkcs7_padded(plaintext):
        return unpad(plaintext, 16).decode('ascii')
    else:
        return plaintext.decode('ascii')

# --- From Diffie hellman Start 5 ---

print(decrypt_flag(shared_secret, iv, flag_enc))