from Crypto.Util.number import long_to_bytes, bytes_to_long
import numpy as np

e = 65537
N = 89820998365358013473897522178239129504456795742012047145284663770709932773990122507570315308220128739656230032209252739482850153821841585443253284474483254217510876146854423759901130591536438014306597399390867386257374956301247066160070998068007088716177575177441106230294270738703222381930945708365089958721
c = 0x5233da71cc1dc1c5f21039f51eb51c80657e1af217d563aa25a8104a4e84a42379040ecdfdd5afa191156ccb40b6f188f4ad96c58922428c4c0bc17fd5384456853e139afde40c3f95988879629297f48d0efa6b335716a4c24bfee36f714d34a4e810a9689e93a0af8502528844ae578100b0188a2790518c695c095c9d677b
m = bytes_to_long(bytes.fromhex("372f0e88f6f7189da7c06ed49e87e0664b988ecbee583586dfd1c6af99bf20345ae7442012c6807b3493d8936f5b48e553f614754deb3da6230fa1e16a8d5953a94c886699fc2bf409556264d5dced76a1780a90fd22f3701fdbcb183ddab4046affdc4dc6379090f79f4cd50673b24d0b08458cdbe509d60a4ad88a7b4e2921"))

for i in range(11):  # Keeping the range as minimum as possible
    try:
        a = 2**i  # Bruteforcing to get one of the factors using GCD
        p = np.gcd(N, (m**a) - 1)
        q = N // p
        phi = (p - 1) * (q - 1)
        d = pow(e, -1, phi)
        m = pow(c, d, N)
        print(long_to_bytes(m).decode('ascii'))
        break
    except:
        print(f"Trying...{a}")
