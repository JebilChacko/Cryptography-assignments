import json
from pwn import *
from sage.all import *
from Cryptodome.Util.number import long_to_bytes as ltb
from random import randint as ri

r = remote('socket.cryptohack.org', 13398)

def json_send(hsh):
    request = json.dumps(hsh).encode()
    r.sendline(request)

def json_recv():
    line = r.recvline()
    return json.loads(line.decode())

def determine_bit(x):
    residues = [i + 1 for i, f in enumerate(fact) if pow(x, (f - 1) // 2, f) == 1]
    
    if residues == [1, 2, 3, 5, 7] or len(residues) == 16:
        return '1'
    else:
        return '0'

# Factor N by using the Carmichael function.
fact = [
    1288911769345182280978162047973381722380823635671566593519807,
    804417174623672415450557634612568265192863476713582219744267,
    1257159212779420306219169217946797219783415728365988507869027,
    760363004025578077604626764282706830072847466932877419051319,
    2035960746196047990457969452572805869038616040671770568205203,
    16567394141556324107484965437698357115399742102575293290747,
    1198659778546842874656876799650682636702329592515612873898067,
    1676976510651768067412350964868910593417947379184949447823407,
    962196273251325220586440176597115791597983910091568285193479,
    1779340212039893773391726001368709776860306288741559089532759,
    1801752121380249789355959738781230662094667376359625751791543,
    181322805383940703007265906643044843190489788732785182321487,
    2957688520542834742528816032405856023269135282074862187456419,
    91986886828478213472802814993555054129006913989537753096123,
    2127656865180928955386281095823023620786349152280473160223119,
    2580048403805885869520594654954918201506476199364198744646143
]

Flag = ""
print(r.recvline())

for i in range(43):
    char_bin = ""
    bit_list = []

    for j in range(8):
        json_send({"option": "get_bit", "i": str(i * 8 + j)})
        b = int(json_recv()["bit"], 16)
        bit_list.insert(0, determine_bit(b))

    for bit in bit_list:
        char_bin += str(bit)

    Flag += ltb(int(char_bin, 2)).decode()

print(Flag)
